
function [qrs_i_raw]=R_Wave_Detector(ecg,fs,gr)
%% function [qrs_i_raw]=R_Wave_Detector(ecg,fs, gr)
%% Inputs
% ecg : raw ecg vector signal 1d signal
% fs : sampling frequency e.g. 200Hz, 400Hz and etc
% gr : flag to plot or not plot (set it 1 to have a plot or set it zero not
% to see any plots
%% Output
% qrs_i_raw : index of R waves
%% References:
%[1] Sedghamiz. H, "Matlab Implementation of Pan Tompkins ECG QRS detector.",2014.  
%https://www.researchgate.net/publication/313673153_Matlab_Implementation_of_Pan_Tompkins_ECG_QRS_detector
%[2] PAN.J, TOMPKINS. W.J,"A Real-Time QRS Detection Algorithm" IEEE 
% TRANSACTIONS ON BIOMEDICAL ENGINEERING, VOL. BME-32, NO. 3, MARCH 1985.
%%  ================= Read In Data ==================== %%
[ecg,fs,gr] = rdsamp('100.dat'); %Make sure to modify this prior to each run
%% ================= BioSigKit ==================== %%
ecg = ecg(:,1); % choose ecg column from dataset
if ~isvector(ecg)
  error('ecg must be a row or column vector');
end
if nargin < 3
    gr = 1;   % on default the function always plots 
end
%% ======================= Initialize =============================== %
delay = 0;
skip = 0;                                   % becomes one when a T wave is detected
m_selected_RR = 0;
mean_RR = 0;
ser_back = 0; 
%%  bandpass filter for Noise cancelation of other sampling frequencies(Filtering)
[b, a] = butter(2, [5 15]*2/fs, 'bandpass');
[Hnew, f] = freqz(b, a, [], fs);
ecg_bp = filtfilt(b, a, ecg);
ecg_bp = ecg_bp/max(abs(ecg_bp));
if gr
 plot(ecg);axis tight;title('Raw Signal'); zoom on;
end
%% ========== Squaring nonlinearly enhance the dominant peaks ========== %%
 ecg_s = ecg_bp.^2;
%% ============  Moving average ================== %%
%Implement a lowpass filter to calculate moving average
[b,a] = butter(2,5*2/fs,'low'); 
ecg_m = filtfilt(b,a,ecg_s);
ecg_m = ecg_m/ max(abs(ecg_m));
delay = delay + round(0.150*fs)/2;
%% ===================== Fiducial Marks ============================== %% 
% Note : From a physiological point of view no RR wave can occur in less
% than 200 msec distance
[pks,locs] = findpeaks(ecg_m,'MINPEAKDISTANCE',round(0.2*fs));
%% =================== Initialize Some Other Parameters =============== %%
LLp = length(pks);
% ---------------- Stores QRS wrt Sig and Filtered Sig ------------------%
qrs_amp = zeros(1,LLp);         % amplitude of R
qrs_i = zeros(1,LLp);           % index
qrs_i_raw = zeros(1,LLp);       % amplitude of R raw
qrs_amp_raw= zeros(1,LLp);      % Index of raw signal
% ------------------- Noise Buffers ---------------------------------%
noise_c = zeros(1,LLp);
noise_i = zeros(1,LLp);
% ------------------- Buffers for Signal and Noise ----------------- %
SIGL_buf = zeros(1,LLp);
NOISE_buf = zeros(1,LLp);
SIGL_buf1 = zeros(1,LLp);
NOISE_buf1 = zeros(1,LLp);
THRS_buf1 = zeros(1,LLp);
THRS_buf = zeros(1,LLp);
%% initialize the training phase (2 seconds of the signal) to determine the THR_SIG and THR_NOISE
THR_SIG = max(ecg_m(1:2*fs))*1/3;                       % 0.25 of the max amplitude 
THR_NOISE = mean(ecg_m(1:2*fs))*1/2;% 0.5 of the mean signal is considered as noise
SIG_LEV= THR_SIG;
NOISE_LEV = THR_NOISE;
%% Initialize bandpass filter threshold(2 seconds of the bandpass signal)
THR_SIG1 = max(ecg_bp(1:2*fs))*1/3;                     % 0.25 of the max amplitude 
THR_NOISE1 = mean(ecg_bp(1:2*fs))*1/2; 
SIG_LEV1 = THR_SIG1;                            % Signal level in Bandpassed filter
NOISE_LEV1 = THR_NOISE1;                         % Noise level in Bandpassed filter
%% ============ Thresholding and decision rule ============= %%
Beat_C = 0;                                                             % Raw Beats
Beat_C1 = 0;                                                       % Filtered Beats
Noise_Count = 0;                                                    % Noise Counter
for i = 1 : LLp  
   %% ===== locate the corresponding peak in the filtered signal === %%
    if locs(i)-round(0.150*fs)>= 1 && locs(i)<= length(ecg_bp)
          [y_i,x_i] = max(ecg_bp(locs(i)-round(0.150*fs):locs(i)));
       else
          if i == 1
            [y_i,x_i] = max(ecg_bp(1:locs(i)));
            ser_back = 1;
          elseif locs(i)>= length(ecg_bp)
            [y_i,x_i] = max(ecg_bp(locs(i)-round(0.150*fs):end));
          end       
    end       
 %% == calculate the mean last 8 R waves to ensure that QRS is not ==== %%
       if m_selected_RR
           test_m = m_selected_RR;              %if the regular RR available use it   
       elseif mean_RR && m_selected_RR == 0
           test_m = mean_RR;   
       else
           test_m = 0;
       end
    if test_m
          if (locs(i) - qrs_i(Beat_C)) >= round(1.66*test_m)       % it shows a QRS is missed 
              [pks_temp,locs_temp] = max(ecg_m(qrs_i(Beat_C)+ round(0.200*fs):locs(i)-round(0.200*fs))); % search back and locate the max in this interval
              locs_temp = qrs_i(Beat_C)+ round(0.200*fs) + locs_temp -1; % location 
              if pks_temp > THR_NOISE
               Beat_C = Beat_C + 1;
               qrs_amp(Beat_C) = pks_temp;
               qrs_i(Beat_C) = locs_temp;      
              % ------------- Locate in Filtered Sig ------------- %
               if locs_temp <= length(ecg_bp)
                  [y_i_t,x_i_t] = max(ecg_bp(locs_temp-round(0.150*fs):locs_temp));
               else
                  [y_i_t,x_i_t] = max(ecg_bp(locs_temp-round(0.150*fs):end));
               end
              % ----------- Band pass Sig Threshold ------------------%
               if y_i_t > THR_NOISE1 
                  Beat_C1 = Beat_C1 + 1;
                  qrs_i_raw(Beat_C1) = locs_temp-round(0.150*fs)+ (x_i_t - 1); % save index of bandpass 
                  qrs_amp_raw(Beat_C1) = y_i_t;        % save amplitude of bandpass 
                  SIG_LEV1 = 0.25*y_i_t + 0.75*SIG_LEV1;      % when found with the second thres 
               end
               not_nois = 1;
               SIG_LEV = 0.25*pks_temp + 0.75*SIG_LEV ;    % when found with the second threshold             
             end             
          else
              not_nois = 0;         
          end
    end
    %% ===================  find noise and QRS peaks ================== %%
    if pks(i) >= THR_SIG      
      % ------ if No QRS in 360ms of the previous QRS See if T wave ------%
       if Beat_C >= 3
          if (locs(i)-qrs_i(Beat_C)) <= round(0.3600*fs)
              Slope1 = mean(diff(ecg_m(locs(i)-round(0.075*fs):locs(i))));    % mean slope of the waveform at that position
              Slope2 = mean(diff(ecg_m(qrs_i(Beat_C)-round(0.075*fs):qrs_i(Beat_C)))); % mean slope of previous R wave
              if abs(Slope1) <= abs(0.5*(Slope2))   % slope less then 0.5 of previous R
                 Noise_Count = Noise_Count + 1;
                 noise_c(Noise_Count) = pks(i);
                 noise_i(Noise_Count) = locs(i);
                 skip = 1;                                  % T wave identification
                 % ----- adjust noise levels ------ %
                 NOISE_LEV1 = 0.125*y_i + 0.875*NOISE_LEV1;
                 NOISE_LEV = 0.125*pks(i) + 0.875*NOISE_LEV; 
              else
                 skip = 0;
              end
            
           end
        end
        %---------- skip is 1 when a T wave is detected -------------- %
        if skip == 0    
          Beat_C = Beat_C + 1;
          qrs_amp(Beat_C) = pks(i);
          qrs_i(Beat_C) = locs(i);
        %--------------- bandpass filter check threshold --------------- %
          if y_i >= THR_SIG1  
              Beat_C1 = Beat_C1 + 1;
              if ser_back 
                 qrs_i_raw(Beat_C1) = x_i;                 % save index of bandpass 
              else
                 qrs_i_raw(Beat_C1)= locs(i)-round(0.150*fs)+ (x_i - 1);   % save index of bandpass 
              end
              qrs_amp_raw(Beat_C1) =  y_i;             % save amplitude of bandpass 
              SIG_LEV1 = 0.125*y_i + 0.875*SIG_LEV1;        % adjust threshold for bandpass filtered sig
          end
         SIG_LEV = 0.125*pks(i) + 0.875*SIG_LEV ;             % adjust Signal level
        end           
    elseif (THR_NOISE <= pks(i)) && (pks(i) < THR_SIG)
         NOISE_LEV1 = 0.125*y_i + 0.875*NOISE_LEV1;   % adjust Noise level in filtered sig
         NOISE_LEV = 0.125*pks(i) + 0.875*NOISE_LEV;    % adjust Noise level in MVI       
    elseif pks(i) < THR_NOISE
        Noise_Count = Noise_Count + 1;
        noise_c(Noise_Count) = pks(i);
        noise_i(Noise_Count) = locs(i);    
        NOISE_LEV1 = 0.125*y_i + 0.875*NOISE_LEV1; % noise level in filtered signal    
        NOISE_LEV = 0.125*pks(i) + 0.875*NOISE_LEV;     % adjust Noise level in MVI     
    end      
    %% ================== adjust the threshold with SNR ============= %%
    if NOISE_LEV ~= 0 || SIG_LEV ~= 0
        THR_SIG = NOISE_LEV + 0.25*(abs(SIG_LEV - NOISE_LEV));
        THR_NOISE = 0.5*(THR_SIG);
    end
    %------ adjust the threshold with SNR for bandpassed signal -------- %
    if NOISE_LEV1 ~= 0 || SIG_LEV1 ~= 0
        THR_SIG1 = NOISE_LEV1 + 0.25*(abs(SIG_LEV1 - NOISE_LEV1));
        THR_NOISE1 = 0.5*(THR_SIG1);
    end
%--------- take a track of thresholds of smoothed signal -------------%
SIGL_buf(i) = SIG_LEV;
NOISE_buf(i) = NOISE_LEV;
THRS_buf(i) = THR_SIG;
%-------- take a track of thresholds of filtered signal ----------- %
SIGL_buf1(i) = SIG_LEV1;
NOISE_buf1(i) = NOISE_LEV1;
THRS_buf1(i) = THR_SIG1;
% ----------------------- reset parameters -------------------------- % 
skip = 0;                                                   
not_nois = 0; 
ser_back = 0;    
end
%% ======================= Adjust Lengths ============================ %%
qrs_i_raw = qrs_i_raw(1:Beat_C1);
qrs_amp_raw = qrs_amp_raw(1:Beat_C1);
qrs_i = qrs_i(1:Beat_C);
qrs_amp = qrs_amp(1:Beat_C);
%% ================== overlay on the signals ========================= %%
 if gr
   figure;
   plot(ecg-mean(ecg));
   title('Detected R-Waves on ECG signal'); axis tight; zoom on;
   line(repmat(qrs_i_raw,[2 1]),...
       repmat([min(ecg-mean(ecg))/2; max(ecg-mean(ecg))/2],size(qrs_i_raw)),...
       'LineWidth',2.5,'LineStyle','-.','Color','r');
 end
%% Optional Functionality: Compares output of this function to an annotation file
% comparator(qrs_i_raw);
end 