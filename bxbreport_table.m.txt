function [CM, Sense, PosPr] = bxbreport_table(Rfile)
%% bxbrdrpt: Read report generated by Physionet bxb().
%% Inputs
% Rfile: (string) Full name of the report file (including any needed
%        path information and filename extension).
%% Outputs
% CM: Confusion matrix.  A 7x7 (double) confusion matrix, as printed by bxb().
%     Columns are labeled n, s, v, f, q, o and x (truth). Columns are
%     same order, but label test results.  Lower right 2x2 submatrix
%     not used, so set to zero values.
% Sense: QRS sensitiviy, as listed in the report file.
% PosPr: QRS positive predictivity, as listed in the report file.
% a test.csv file with all the values from all the report files compiled
%% Be sure to modify the record number for each run in the first two lines
Rfile = '100_bxbReport.txt';
record_nums = 100;

fid = fopen(Rfile, 'rt');  % Open report file.
if fid<0, error(['bxbrdrpt: Cannot open ' Rfile]); end

for i=1:7  % Read unused header lines.
  tline = fgetl(fid); if tline == -1, error(['bxbrdprt: Bogus header in ' Rfile]); end
end

%% Read 7 lines of tabular result data into confusion matrix CM.
%   Number of entries per line differ.  So, customize read for each line.
Label = 'NSVFQOX';       % Row labels, from bxb report table.
Entry = [7 7 7 7 7 5 5]; % Expected columns per row.
CM = zeros(7,7);         % Pre-allocate and initialize confusion matrix.
for row = 1:7  % Loop over each row in report file confusion matrix.
  tline = fgetl(fid);  % Read full line.
  if tline == -1, error(['bxbrdprt: Bogus row' Label(row) ' in ' Rfile]); end
  for col = 1:Entry(row)  % Build format.  Skip first two strings.
    format = '%*s %*s'; for i=1:Entry(row), format = [format ' %d']; end %#ok<AGROW>
  end
  Avec = sscanf(tline, format, [1 Entry(row)]); % Read confuse matrix entries.
  CM(row, 1:Entry(row)) = Avec; % Insert into confusion matrix.
end

% Read QRS sensitivity and positive predictivity.
%   Empty line.
tline = fgetl(fid);
if tline == -1, error(['bxbrdprt: Bogus empty line after CM in ' Rfile]); end
%   QRS sensitivity.
tline = fgetl(fid);
if tline == -1, error(['bxbrdprt: Bogus QRS sensitivity line in ' Rfile]); end
Sense = sscanf(tline, '%*s %*s %f', [1 1]);
%   QRS positive predictivity.
tline = fgetl(fid);
if tline == -1, error(['bxbrdprt: Bogus QRS positive predictivity line in ' Rfile]); end
PosPr = sscanf(tline, '%*s %*s %*s %f', [1 1]);

% Close the file.
fclose(fid);

%% Tabulate all results into a csv
data = {'Record Number' 'QRS sensitivity' 'QRS positive predictivity'};
data1= {record_nums Sense PosPr};
Data = [data;data1];
if isfile('test.csv')
    read_arr = readmatrix('test.csv');   
    [m,n] = size(read_arr);
    if m >= 1
        writecell(data1, 'test.csv','WriteMode','append')
    end     % File exists.
else
     writecell(Data, 'test.csv'); % File does not exist.
end

